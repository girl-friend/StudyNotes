1、	new Vue({
		el:'#box',
		data:{	//数据
			arr:['1','2','3'],
			json:{a:'aaa',b:'bbb'}
		},
		methods:{	//方法
			add:function(){
				this.arr.push('apple');
			}
		} 
	});
2、循环
	v-for="(value,key,index) in arr/json limitBy 2 1"	//数组不要key
	{{value}}值		{{key}}键	{{index}}下标(0,1,2)	
	如果有重复数据，在标签加上	track-by='$index/索引'	能提高循环性能,在2.0里变成了:key="index"
3、绑定事件
	v-on:click="函数名"
	简写：@click="show($event)"	//$event事件对象，固定写法
	@click.native="事件"	//在模板标签中调用构造器里的方法
	onclick="vm.事件"	//在外面调用new Vue里的方法
4、阻止事件冒泡/默认行为
	1.	ev.cancelBubble=true;
	2.	@click.stop
	a.	ev.preventDefault();
	b.	@contextmenu.prevent;	//鼠标右键阻止默认行为
5、键盘事件
	@keyup.enter/13="show()"	//抬起回车键时触发事件
6、绑定属性
	<img v-bind:src="url">	//用src="{{url}}"会报一个404的错误
	简写：:src="url"
7.绑定class
	.blue{color:blue}
	.red{background:red}
	data:{json:{red:true,blue:false}}
	<div :class="json"><div/>
8、模板
	{{*msg}}数据只绑定一次
	{{{msg}}} html转义输出
9、过滤器
	{{msg|filterA|filterB}}
	json	把obj转为json数据
	{{12|currency '￥'}}	12.00人民币
	uppercase	大写
	lowercase	小写
	capitalize	首字母大写
	@click="show | debounce 2000"	//延迟2000毫秒调用方法，配合事件
	v-for="val in arr | limitBy 2 1"	//取2个，从0开始
	filterBy a	//只包含‘a’的数据
	orderBy 1	正序排列，-1为倒叙
	2.0删除了所有的过滤器
	自定义过滤器
	Vue.fiter('demo',function(input,a,b){	//如：过滤9,input就是9,返回09,a,b是接收的参数;
		return input<10?'0'+input:''+input;
	});
	{{msg | demo('12','3')}}
	双向过滤器：
	Vue.filter('filterHtml',{
		read.function(input){	//model->view
			return input.replace(/[<]+>/g,'');	//过滤html标签
		},
		write:function(val){	//view->model
			return val;
		}
	})
10、钩子函数
		created:function(){	//实例创建后调用	}
		beforeCompile:function(){	//编译之前	}
		compiled:	//编译之后
		ready:		//插入到文档中
		beforeUpdate	//数据更新前
		updated	//数据更新后
		beforeDestroy:	//销毁之前
		destroyed:		//销毁之后
	2.0的生命周期
		beforeCreate	//组件实例刚刚被创建(属性都没有)
		created			//实例创建完成(有属性,dom还没生产)
		beforeMount		//模板编译之前
		mounted			//模板编译完成
		beforeUpdate	//组件(数据)更新之前
		updated			//组件(数据)更新完毕
		beforeDestroy	//销毁之前
		destroyed		//销毁之后
11、防止闪烁
	v-cloak		[v-cloak]:{display:none;}	//防止用户看到花括号
	v-text="msg"	直接输出数据，不会转义
	v-html		//可以转义html代码
12、计算属性
	computed:{
		b:{
			get:function(){
				return 值	//就是b的值
			}
			set:function(val){
				设置b值时调用，val就是设置时的值
			}
		}
	}
13、vue简单实列方法
	vm.$el	//就是绑定的元素
	vm.$data	//就是data
	vm.$mount('#box')	//手动挂载
	vm.$options.a/show()	//获取自定义属性或调用自定义方法
	vm.$destroy		//销毁对象(销毁自定义指令时触发解绑的钩子函数)
	vm.$log()		//查看现在数据
	vm.$nextTick(fn(){	//数据更新后调用})
	vm.$on('text',fn(){});	//在构造器外绑定事件
	vm.$once('text',fn(){});	//只触发一次
	vm.$emit('text');触发由$on和$once绑定的事件
14、其他常用指令
	v-if="demo"	//在data中demo值为true时加载标签，为false减轻服务器压力
	v-show="demo"	//为false时把display改为none
	v-pre	//原样输出，不进行渲染
	v-once	//只进行一次渲染(数据绑定后改变数据也不会变)
15、v-model双向数据绑定
	v-model="a"	//给表单绑定数据,双向数据绑定
	v-model.lazy	//懒加载，表单失去焦点时加载
	v-model.number	//只绑定数字，如果一开始输入的是字符就无效
	v-model.trim	//去掉前后的空格
16、自定义指令
	v-指令名='参数';	//参数可以在data里
	Vue.directive('指令名字',fn(el,binding){
	})
	2.0变成了 Vue.config...
	
	自定义指令的钩子函数
	bind  只调用一次，指令第一次绑定到元素时调用
	inserted  被绑定元素插入父节点时调用
	update  被绑定于元素所在的模板更新时调用
	componentUpdared  被绑定元素所在模板完成一次更新周期时调用
	unbind  只调用一次，指令与元素解绑时调用
17、watch选项
	watch:{
		massage:function(newVal,oldVal){
			当data里massage值改变时触发的函数
			newVal时改变的值，oldVal是改变之前的值
		}
	}
	或者
	vm.$watch('massage',function(new,old){	//同上	},{deep:turn});	深度监听(json内)
18、修改模板的输出形式{{massage}}
	delimiters:['~~','~~']
19、全局组件
	//另一种方式参考Vue.extend
	<aaa></aaa>	//必须在vue对象下
	Vue.component('aaa',{
		data(){		//data必须是一个函数，并且有返回值
			return {
				msg:'数据'
			}
		},
		methods:{
                change(){
                    this.message = 222;
                }
            },
		template:'<h1>h1标签{{msg}}</h1>'	//把aaa替换成的模板
	});
20、组件之间传递数据
	1、子组件获取父组件data
		<bbb :m="数据名"></bbb>
		子组件内：props:['m']
		子组件如果想改变父组件的数据：
		1
			a、父组件传一个对象给子组件：msg:{a:1}
			b、子组件方法中改变：	this.msg.a=2;	这样两边的a都改变了
		2
			给子组件定义一个空数据用mounted函数中转等于父组件的数据
			再改变子组件数据的时候父组件的数据就不改变了
	2、父组件获得子组件数据
		在子组件里的方法中:	this.$emit(事件名,数据)
		在子组件标签中：:事件名="get"
		在父组件中添加方法:		get(msg){	//msg就是子组件发送的数据}
	3、单一事件管理组件通信
		var Event = new Vue();
		//在a组件方法中发送数据
		Event.$emit(事件名,this.msg);
		//在b组件中接收数据
		Event.$on(事件名,function(data){//data就是接收的数据	}.bind(this));
21、过渡
	<transition name="fade" mode="out-in"></transition>
	.fade-enter		.fade-leave
	.fade-enter-active,fade-leave-active{
		transition:all 3s;
	}
	元素显示时：
	从.fade-enter过渡到.fade-enter-active然后变为原始属性
	隐藏时：
	从原始属性到.fade-leave-active在消失;.fade-leave好像没用
	有8个钩子函数，参考手册
	mode是过渡模式,out-in是先退出后进入,in-out是先进入后退出
	
	配合animate.css:
	<transition enter-active-class="zoomOut" leave-active-class="wobble">
	<p v-show="show" class="animated"></p>
	</transition>
	多个元素动画
	<transition-group enter-active-class="zoomOut" leave-active-class="wobble">
        <p v-show="show" class="animated" :key="1"></p>
        <p v-show="show" class="animated":key="2"></p>        
    </transition-group>
22、路由实例方法
	router.push({path:'home'});	//直接添加一个路由，表现为切换路由，本质往历史记录里添加一个
	router.replace({path:'news'})	//把当前路由替换为news，不会刷新页面和历史记录里添加
21、vue-router传递参数
	1、name传参
		在router中的配置中设置name属性：
		{
			path:'/',
			name:'Hello',
			component:Hello
		}
		在模板中获得name属性{{$route.name}}
	2、router-link传参
		<router-link :to="{name:hi1,params:{key:value}}"></router-link>
		name:就是在路由配置中的name值
		params:要传的参数
		在hi1.vue的模板中用{{$route.params.username}}显示参数
		在方法中this.$route.params.username
22、单页面多路由
	<router-view></router-view>
	<router-view name="left" style="float:left"></router-view>
	<router-view name="right" style="float:right"></router-view>
	在router中配置时
	components:{
		default:Hello,
		left:Hi1,
		right:Hi2
	}
23、去掉路由的#/：在router中加上mode:'history'
24、404页面：在router中添加path:'*'然后配置component的404模板
25、路由中的钩子函数：
	1.写在router配置中的
		{
		  path:'/params/:newsId(\\d+)/:newsTitle',
		  component:Params,
		  beforeEnter:(to,from,next)=>{	//进入此路由时的钩子
			console.log('我进入了params模板');
			console.log(to);	//路由将要跳转的路径信息
			console.log(from);	//跳转前的路径信息
			next();括号里为true或false
		},
	2.写在.vue的钩子函数：
		export default {
			name:'params',
			data(){
				return{
					mag:''
				}
			},
			beforRouteEnter:(to,from,next)=>{
				console.log("准备进入路由");
				next();
			},
			beforRouteLeave:(to,from,next)=>{
				consol.log("准备离开路由");
				next();
			}
		}
26、前进/后退
	在模板中
		<button @click="goback">后退</button>
		<button @click="goHome">回到首页</button>
	然后在js中
	export default {
		name:'app',
		methods:{
			goback(){
				this.$router.go(-1);//1表示前进
			},
			goHome(){
				this.$router.push('/');//可以用于判断用户未登录然后跳转
				that.$router.replace('/404') //替换掉当前路由
			}
		}
	}
27、获得vuex的数据
	在模板js中引入：import store from '@/vuex/store'
	直接在模板中输出：{{$store.state.count}}
	用计算属性获得：
		1：computed:{
			count(){	//count就是值了
				return this.$store.state.count	
			}
		}
		2和3：引入: import {mapState} from 'Vuex'
		computed:mapState({
			count:state=>state.count
		})
		computed:mapState(['count'])
		
		
编辑器模板：
	<template></template>
	<script type="text/ecmascript"></script>
	<style lang="stylus" rel="stylesheet/stylus" scoped></style>
	
	
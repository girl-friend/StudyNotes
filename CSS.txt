1、清除浮动：
 1、overflow
  hidden、auto、scroll
 2、clear   外墙、内墙
  Right、Left、Both
 3、.clearfix:after {content:"."; display:block; height:0; visibility:hidden; clear:both; }
    .clearfix { *zoom:1; }

2、居中：
 1、文字：text-align:center; line-heignt:行高;
 2、行内元素：给父元素：text-align:center;display:table-cell;vertical-align:middle;
 3、margin:auto;CSS3中的
 
3、表格边框
  table {
	border-collapse:collapse; //边框折叠
	border-spacing:0;
	cellspacing:0;//边框间距
}

4、选择器
	+选择器
		ul>li*6
		ul>li+li{
		//选择每个li后面的紧邻li元素,通常制作border中线
		}
	div[class^="col-md"]{//包含class属性且以col-md开头的div元素}
	div[class*="col-md"]{//包含class属性包含col-md的div元素}
	div[class$="col-md"]{//包含class属性且以col-md结束的div元素}
  
5、text-indent:2em;//首行缩进，rem是以html的font-size为单位的

6、字体阴影：
	text-shadow:-5px -10px 4px red;	//左右偏移 上下偏移 模糊度 颜色
  
7、文本超出显示...
	white-space:nowrap;	//文本超出不换行
	overflow:hidden;	//超出隐藏
	text-overflow:ellipsis;//超出显示...
  
8、边框圆角
	border-radius:1px 2px 3px 5px/6px 7px 8px 10px;	//前面表示4个角x轴的半径,后面为y轴;
  
9、指定盒模型的宽高
	box-sizing:border-box	//width=border+padding+content
	box-sizing:content-box	//width=content
  
10、visibility: hidden 和 display: hidden 和 overflow: hidden
  visibility: hidden | visible; 表示显示或隐藏(仍占有空间)
  而display: hidden; 隐藏后不占空间
  overflow: hidden 表示超出的部分隐藏
  
11、伪元素替代<br>实现行内元素换行
  .inline-dlement::after {
    content: "\A";
    white-space: pre;
  }

12、background-clip 设置元素的背景（背景图片或颜色）是否延伸到边框下面
  background-color 是从元素的边框左上角起到右下角止，而 background-image 却不一样，
    他是从 padding 边缘的左上角起而到 border 的右下角边缘止。
  background-clip: border-box;  // 背景延伸到边框外沿（但是在边框之下）
  background-clip: padding-box; // 边框下面没有背景，即背景延伸到内边距外沿
  background-clip: content-box; // 背景裁剪到内容区外沿
  
CSS3
CSS使用手册：
	 [] 表示可选项
	 || 或者
	 |  多选一
	 ？ 0个或1个
	 *  0个或多个
	 {} 范围

伸缩布局：
	1、display:flex; 	//给父盒子确定
	2、flex-direction:	//子元素确定方向(主轴方向)
		row (水平，默认)  
		column (竖直)  
		row reverse (水平反向) 
		column reverse  
	3、justify-content:		//在父盒子上确定子盒子(主轴)的对齐方式
		flex-start (开始位置)、
		flex-end、center (居中)、
		space-around (平均)、
		space-between (靠两边对齐)   
	4、align-items:		//调整侧轴的对齐方式(侧轴总是垂直主轴)
		flex-start (开始位置)、
		flex-end、
		center (居中)、
		baseline、
		stretch	
	flex-wrap:wrap、nowrap; // 控制是否换行
	align-content:	//应对flex-wrap后换行进行控制，以行为单位的对齐方式(侧轴，上下移动)
		flex-start (开始位置)、
		flex-end、center (居中)、
		space-around (平均)、
		space-between (靠两边对齐)	
	align-self:		//控制单个子元素对齐方式(侧轴)，可以覆盖父元素的align-items
		flex-start (开始位置)、
		flex-end、center (居中)、
		baseline、stretch  
	flex-flow:是flex-direction和flex-wrap的简写形式
	flex:1;		给子元素，分配剩余的宽度比例
	order:5;	给子元素排序，越大越在后面
径向渐变：
	background-image:radial-gradient(120px 80px at center center,yellow,green); //辐射范围，中心点，颜色的起止

过度：
	transition:		//样式，持续时间，过渡类型，延迟过渡时间
		border-color .5s ease-in .1s,
		background-color .5s ease-in .1s,
		color .5s ease-in .1s;
	obj.addEventListener("transitionend",function(){})	//过渡之后触发事件
变换：
	transform:
		rotate(30deg),	2d旋转30度
		skewx(45deg),x轴上的扭曲
		scalex(2),	x轴上的缩放
		translatex(2),	x轴上的平移
		matrix(a,b,c,d,e,f) //默认为(1,0,0,1,0,0)
			位移：x轴上的位移:e=e+x
				  y轴上的位移:f=f+y
			缩放：x轴缩放：a=x*a c=x*c e=x*e;
				  y轴缩放：b=y*b d=y*d f=y*f;
			斜切：x轴斜切：c=Math.tan(xDeg/180*Math.PI)
				  y轴斜切：b=Math.tan(yDeg/180*Math.PI)
	transform-origin:left top;	旋转和缩放的 中心点
3D变换：
	transition:all 3s;
	transform:
		rotateZ(360deg);
		rotatex(60deg);		//x轴上旋转
		translatez(100px);	//z轴上的平移，离观察者近100px
		scalez()： 指定对象的z轴缩放 
	transform-origin:left bottom 0; //变换中心点，不要设在hover上
	tramsform-style:preserve-3d;让元素的子元素（看起来）在3d空间上
	perspective:100px;	//以100px的距离看过去
	perspective-origin: 50% 50%;	//景深基点(以什么角度看过去，设在父元素上)
	backface-visibility:visible | hidden;
		visible： 指定元素背面可见，允许显示正面的镜像。 
		hidden： 指定元素背面不可见 
	

动画：
	animation:change 60s steps(60) infinite;//名字，动画持续时间，60秒分60次完成，无限循环
	animation-name:change;//动画名称
	animation-duration: 5s;//动画持续时间
	animation-fill-mode:forwards; //动画后的状态
	animation-iteration-count:infinite;//动画循环次数（无限播放）
	animation-delay:1s;  //延时1s
	animation-play-state:paused; //动画状态（动画暂停），可以hover时使用
	animation-direction:alternate;//动画反方向运动
	animation-timing-function:linear;// 动画的过渡类型

@keyframes change {
 0% {
   width:40px;
   height:40px;
}
 100%{
}
}
obj.addEventListener("aniiationend",function(){})	//动画之后触发事件


#bg:target{  //选中
z-index:4;
}
#bg:not(:target){  //不选中
z-index:2;
}
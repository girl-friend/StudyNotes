1.数据库的备份和恢复
  备份：mysqldump -h服务器地址 -u登录名 -p 数据库名 > 文件名  （为管理员身份）
  恢复：mysql -h服务器地址 -u登录名 -P端口号 -p数据库名 < 文件名
  在没有登录时用
  source 完整路径  在登录时使用
2.字段属性
   auto_increment; 自增长
   primary key;主键
   unique key; 唯一
   not null;   字段不能为空
   default  XX值；  默认值，insert没有给值时就使用默认值
   comment '字段说明文字';
3.索引类型  
   普通索引：key(字段名)
   唯一索引（约束）：unique key()
   主键索引（约束）：primary key()
   全文索引：fulltext()
   外键索引（约束）：foreign key(字段名) references 其他表（对应其他表的字段名）
4、表选项列表：
   charset = 要使用的字符编码
   engine = 要使用的存储引擎（也叫表类型）InnoDB,MyIsam,archive,Memory
   auto_increment = 设定自增长的初始值，默认是1
   comment = ‘该表的一些说明文字’
5、字段类型
    字符类型：
     varchar:变长字符，实际最大65533
     char:  定长字符
     enum:  适用存储单选  enum('单选1','2'...),对应1.2.3.4..
     set:   存储多选数据   set('选项1','2'...),对应1.2.4.8.16....
     text：  不占行空间
    时间类型：
     datetime,date,time,year,
     timestamp:适用于数据需要自动获取当前时间
6、表定义语句
   create table 表名 （字段1，字段2,...[索引或约束1,2...]）[表选项1,2...];
   字段设定形式:字段名 字段类型 【字段属性列表】
7、删除数据
   delete form 表名 【where条件】【order by 排序字段】【limit 限定行数】；
8、查询基本语法
   select [all|distinct] 字段或表达式列表 [from子句] [where子句] [group by子句] [having子句] [order by子句]   [limit子句]; 
9、insert into 表名 (字段1，字段2...) values(值a1,a2..),(值b1,b2...)..;
   replace into...(主键相同时替换)
   insert into 表 set 字段1=a1,字段2=a2...;
   insert into 表名 (字段1，字段2...) select 字段1，字段2...form 表2;
   load data(载入数据)
10、内连接
   select * from 表1 【inner】 join 表2 on 连接条件;
    左连接
   select * from 表1 left【outer】 join 表2 on 连接条件;
    右连接
   select * from 表1 right join 表2 on 连接条件;
11、where exists（子查询），主查询的数据作为子查询的判断条件
12、联合查询：
   select 语句1
   union 【disctinct|all】
   select 语句2;
13、grant 权限列表 on 某库.某个对象 to '用户名'@'允许登录位置'【identified by '密码'】;  授予权限或创建用户或修改密码
14、revoke 权限列表 on 某库.某个对象 from '用户名'@'允许登录位置'; 剥夺权限
   
15、事务流程
   1、start transaction;   或begin;  //开启事务
   2、执行多条增删改语句;
   3、commit;  //提交事务；此时就是一次性完成
      rollback;//回滚事务；此时就是都没有做
16、普通变量
     declare 变量名 【default 默认值】; 先定义
     set 变量名 = 值； //赋值
     只能在编程环境中使用
    会话变量：带 @ 符号
      定义形式（也是赋值）：
      set @变量名 = 值;
17、改变结束符
      delimiter ///
18、存储函数
    creat function 函数名（形参1 类型1，...）
     return 返回类型
    begin
     #这里是完整的函数语句
      return xx值;
    end